{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anil Kumar\\\\Desktop\\\\Peronal Project\\\\bot-image-ocr\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotAvatar = () => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [extractedText, setExtractedText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleBotClick = () => {\n    document.getElementById('fileInput').click();\n  };\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setSelectedImage(URL.createObjectURL(file));\n      setLoading(true);\n\n      // Use Tesseract.js to recognize text from the image\n      Tesseract.recognize(file, 'eng', {\n        logger: m => console.log(m)\n      }).then(({\n        data: {\n          text\n        }\n      }) => {\n        setExtractedText(text);\n        setLoading(false);\n      }).catch(error => {\n        console.error('Error recognizing text:', error);\n        setLoading(false);\n      });\n    }\n  };\n  const handleReadAloud = () => {\n    if ('speechSynthesis' in window) {\n      const speech = new SpeechSynthesisUtterance(extractedText);\n      window.speechSynthesis.speak(speech);\n    } else {\n      alert('Sorry, your browser does not support text-to-speech.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://via.placeholder.com/150\",\n        alt: \"Bot Avatar\",\n        className: \"cursor-pointer w-40 h-40 rounded-full border-4 border-blue-500\",\n        onClick: handleBotClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg mt-4\",\n        children: \"Click on the bot to upload an image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"fileInput\",\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageUpload,\n        className: \"hidden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedImage,\n          alt: \"Uploaded\",\n          className: \"w-60 h-auto border-2 border-gray-300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2 text-blue-500\",\n          children: \"Processing image...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2 text-green-500\",\n          children: \"Text extracted successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), extractedText && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-white shadow rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-bold\",\n        children: \"Extracted Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 mt-2\",\n        children: extractedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReadAloud,\n        className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none\",\n        children: \"Read Aloud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(BotAvatar, \"LTx8DqRVLQRPORuARQ/7AS1PGHs=\");\n_c = BotAvatar;\nexport default BotAvatar;\nvar _c;\n$RefreshReg$(_c, \"BotAvatar\");","map":{"version":3,"names":["React","useState","Tesseract","jsxDEV","_jsxDEV","BotAvatar","_s","selectedImage","setSelectedImage","extractedText","setExtractedText","loading","setLoading","handleBotClick","document","getElementById","click","handleImageUpload","e","file","target","files","URL","createObjectURL","recognize","logger","m","console","log","then","data","text","catch","error","handleReadAloud","window","speech","SpeechSynthesisUtterance","speechSynthesis","speak","alert","className","children","src","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","type","accept","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Anil Kumar/Desktop/Peronal Project/bot-image-ocr/src/components/Home.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nconst BotAvatar = () => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [extractedText, setExtractedText] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleBotClick = () => {\r\n    document.getElementById('fileInput').click();\r\n  };\r\n\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setSelectedImage(URL.createObjectURL(file));\r\n      setLoading(true);\r\n\r\n      // Use Tesseract.js to recognize text from the image\r\n      Tesseract.recognize(file, 'eng', {\r\n        logger: (m) => console.log(m),\r\n      })\r\n        .then(({ data: { text } }) => {\r\n          setExtractedText(text);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error recognizing text:', error);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleReadAloud = () => {\r\n    if ('speechSynthesis' in window) {\r\n      const speech = new SpeechSynthesisUtterance(extractedText);\r\n      window.speechSynthesis.speak(speech);\r\n    } else {\r\n      alert('Sorry, your browser does not support text-to-speech.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center h-screen bg-gray-100\">\r\n      <div className=\"text-center\">\r\n        {/* Bot Avatar */}\r\n        <img\r\n          src=\"https://via.placeholder.com/150\"\r\n          alt=\"Bot Avatar\"\r\n          className=\"cursor-pointer w-40 h-40 rounded-full border-4 border-blue-500\"\r\n          onClick={handleBotClick}\r\n        />\r\n\r\n        <p className=\"text-lg mt-4\">Click on the bot to upload an image</p>\r\n\r\n        {/* Hidden file input */}\r\n        <input\r\n          id=\"fileInput\"\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={handleImageUpload}\r\n          className=\"hidden\"\r\n        />\r\n\r\n        {/* Show the selected image */}\r\n        {selectedImage && (\r\n          <div className=\"mt-4\">\r\n            <img\r\n              src={selectedImage}\r\n              alt=\"Uploaded\"\r\n              className=\"w-60 h-auto border-2 border-gray-300\"\r\n            />\r\n            {loading ? (\r\n              <p className=\"mt-2 text-blue-500\">Processing image...</p>\r\n            ) : (\r\n              <p className=\"mt-2 text-green-500\">Text extracted successfully!</p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Show extracted text */}\r\n      {extractedText && (\r\n        <div className=\"mt-6 p-4 bg-white shadow rounded\">\r\n          <h3 className=\"text-lg font-bold\">Extracted Text:</h3>\r\n          <p className=\"text-gray-700 mt-2\">{extractedText}</p>\r\n\r\n          {/* Read Aloud Button */}\r\n          <button\r\n            onClick={handleReadAloud}\r\n            className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none\"\r\n          >\r\n            Read Aloud\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BotAvatar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}