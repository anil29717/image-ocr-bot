{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anil Kumar\\\\Desktop\\\\Peronal Project\\\\bot-image-ocr\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotAvatar = () => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [extractedText, setExtractedText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const speechRef = useRef(null);\n\n  // Function to preprocess the image\n  const preprocessImage = file => {\n    return new Promise(resolve => {\n      const img = new Image();\n      img.src = URL.createObjectURL(file);\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n\n        // Convert to grayscale\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        for (let i = 0; i < imageData.data.length; i += 4) {\n          const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n          imageData.data[i] = avg; // Red\n          imageData.data[i + 1] = avg; // Green\n          imageData.data[i + 2] = avg; // Blue\n        }\n        ctx.putImageData(imageData, 0, 0);\n        canvas.toBlob(resolve); // Get the blob of the processed image\n      };\n    });\n  };\n  const handleBotClick = () => {\n    document.getElementById('fileInput').click();\n  };\n  const handleImageUpload = async e => {\n    const file = e.target.files[0];\n    if (file) {\n      // Preprocess the image before extracting text\n      const processedBlob = await preprocessImage(file);\n      setSelectedImage(URL.createObjectURL(processedBlob));\n      setLoading(true);\n\n      // Use Tesseract.js to recognize text from the processed image\n      Tesseract.recognize(processedBlob, 'eng', {\n        logger: m => console.log(m)\n      }).then(({\n        data: {\n          text\n        }\n      }) => {\n        setExtractedText(text);\n        setLoading(false);\n      }).catch(error => {\n        console.error('Error recognizing text:', error);\n        setLoading(false);\n      });\n    }\n  };\n  const handleReadAloud = language => {\n    if ('speechSynthesis' in window) {\n      if (speechRef.current) {\n        window.speechSynthesis.cancel();\n      }\n      const speech = new SpeechSynthesisUtterance(extractedText);\n      speech.lang = language;\n      setIsSpeaking(true);\n      speech.onend = () => {\n        setIsSpeaking(false);\n        speechRef.current = null;\n      };\n      speechRef.current = speech;\n      window.speechSynthesis.speak(speech);\n    } else {\n      alert('Sorry, your browser does not support text-to-speech.');\n    }\n  };\n  const handlePause = () => {\n    if (window.speechSynthesis.speaking) {\n      window.speechSynthesis.pause();\n      setIsSpeaking(false);\n    }\n  };\n  const handleResume = () => {\n    if (window.speechSynthesis.paused) {\n      window.speechSynthesis.resume();\n      setIsSpeaking(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"web-site \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-14\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"p-4 ml-20 font-bold text-2xl text-white \",\n          children: \"Bot Speak\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center justify-center h-screen border-t-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-center\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"\",\n              className: \"bot-logo cursor-pointer w-40 h-40 rounded-full border-4 border-blue-950\",\n              onClick: handleBotClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg mt-4 text-white bg-blue-950 rounded-3xl p-2 mt-10\",\n            children: \"Click on the bot to upload an image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"fileInput\",\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImageUpload,\n            className: \"hidden\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: selectedImage,\n              alt: \"Uploaded\",\n              className: \"w-60 h-auto border-2 border-gray-300\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 text-blue-500\",\n              children: \"Processing image...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 text-green-500\",\n              children: \"Text extracted successfully!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), extractedText && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6 p-4 bg-white shadow rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-bold\",\n            children: \"Extracted Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 mt-2\",\n            children: extractedText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleReadAloud('en-US'),\n            className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none\",\n            children: \"Read Aloud (English)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleReadAloud('hi-IN'),\n            className: \"mt-4 ml-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none\",\n            children: \"Read Aloud (Hindi)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePause,\n            className: \"mt-4 ml-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 focus:outline-none\",\n            disabled: !isSpeaking,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleResume,\n            className: \"mt-4 ml-2 px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 focus:outline-none\",\n            disabled: !window.speechSynthesis.paused,\n            children: \"Resume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(BotAvatar, \"izQzth4Uq8YtpH+m1JHdvsocDEg=\");\n_c = BotAvatar;\nexport default BotAvatar;\nvar _c;\n$RefreshReg$(_c, \"BotAvatar\");","map":{"version":3,"names":["React","useState","useRef","Tesseract","jsxDEV","_jsxDEV","BotAvatar","_s","selectedImage","setSelectedImage","extractedText","setExtractedText","loading","setLoading","isSpeaking","setIsSpeaking","speechRef","preprocessImage","file","Promise","resolve","img","Image","src","URL","createObjectURL","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","imageData","getImageData","i","data","length","avg","putImageData","toBlob","handleBotClick","getElementById","click","handleImageUpload","e","target","files","processedBlob","recognize","logger","m","console","log","then","text","catch","error","handleReadAloud","language","window","current","speechSynthesis","cancel","speech","SpeechSynthesisUtterance","lang","onend","speak","alert","handlePause","speaking","pause","handleResume","paused","resume","className","children","fileName","_jsxFileName","lineNumber","columnNumber","alt","onClick","id","type","accept","onChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Anil Kumar/Desktop/Peronal Project/bot-image-ocr/src/components/Home.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\nimport './Home.css'\r\n\r\nconst BotAvatar = () => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [extractedText, setExtractedText] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const speechRef = useRef(null);\r\n\r\n  // Function to preprocess the image\r\n  const preprocessImage = (file) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.src = URL.createObjectURL(file);\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // Convert to grayscale\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        for (let i = 0; i < imageData.data.length; i += 4) {\r\n          const avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\r\n          imageData.data[i] = avg; // Red\r\n          imageData.data[i + 1] = avg; // Green\r\n          imageData.data[i + 2] = avg; // Blue\r\n        }\r\n        ctx.putImageData(imageData, 0, 0);\r\n        canvas.toBlob(resolve); // Get the blob of the processed image\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleBotClick = () => {\r\n    document.getElementById('fileInput').click();\r\n  };\r\n\r\n  const handleImageUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      // Preprocess the image before extracting text\r\n      const processedBlob = await preprocessImage(file);\r\n      setSelectedImage(URL.createObjectURL(processedBlob));\r\n      setLoading(true);\r\n\r\n      // Use Tesseract.js to recognize text from the processed image\r\n      Tesseract.recognize(processedBlob, 'eng', {\r\n        logger: (m) => console.log(m),\r\n      })\r\n        .then(({ data: { text } }) => {\r\n          setExtractedText(text);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error recognizing text:', error);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleReadAloud = (language) => {\r\n    if ('speechSynthesis' in window) {\r\n      if (speechRef.current) {\r\n        window.speechSynthesis.cancel();\r\n      }\r\n\r\n      const speech = new SpeechSynthesisUtterance(extractedText);\r\n      speech.lang = language;\r\n      setIsSpeaking(true);\r\n\r\n      speech.onend = () => {\r\n        setIsSpeaking(false);\r\n        speechRef.current = null;\r\n      };\r\n\r\n      speechRef.current = speech;\r\n      window.speechSynthesis.speak(speech);\r\n    } else {\r\n      alert('Sorry, your browser does not support text-to-speech.');\r\n    }\r\n  };\r\n\r\n  const handlePause = () => {\r\n    if (window.speechSynthesis.speaking) {\r\n      window.speechSynthesis.pause();\r\n      setIsSpeaking(false);\r\n    }\r\n  };\r\n\r\n  const handleResume = () => {\r\n    if (window.speechSynthesis.paused) {\r\n      window.speechSynthesis.resume();\r\n      setIsSpeaking(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='web-site '>\r\n      <div>\r\n        <div className='h-14'>\r\n          <h1 className='p-4 ml-20 font-bold text-2xl text-white '>Bot Speak</h1>\r\n        </div>\r\n        <div className=\"flex flex-col items-center justify-center h-screen border-t-2\">\r\n\r\n          <div className=\"text-center\">\r\n            <div className='flex justify-center'>\r\n            <img\r\n              alt=\"\"\r\n              className=\"bot-logo cursor-pointer w-40 h-40 rounded-full border-4 border-blue-950\"\r\n              onClick={handleBotClick}\r\n            />\r\n            </div>\r\n            <p className=\"text-lg mt-4 text-white bg-blue-950 rounded-3xl p-2 mt-10\">Click on the bot to upload an image</p>\r\n\r\n            {/* Hidden file input */}\r\n            <input\r\n              id=\"fileInput\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={handleImageUpload}\r\n              className=\"hidden\"\r\n            />\r\n\r\n            {/* Show the selected image */}\r\n            {selectedImage && (\r\n              <div className=\"mt-4\">\r\n                <img\r\n                  src={selectedImage}\r\n                  alt=\"Uploaded\"\r\n                  className=\"w-60 h-auto border-2 border-gray-300\"\r\n                />\r\n                {loading ? (\r\n                  <p className=\"mt-2 text-blue-500\">Processing image...</p>\r\n                ) : (\r\n                  <p className=\"mt-2 text-green-500\">Text extracted successfully!</p>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Show extracted text */}\r\n          {extractedText && (\r\n            <div className=\"mt-6 p-4 bg-white shadow rounded\">\r\n              <h3 className=\"text-lg font-bold\">Extracted Text:</h3>\r\n              <p className=\"text-gray-700 mt-2\">{extractedText}</p>\r\n\r\n              {/* Read Aloud Button in English */}\r\n              <button\r\n                onClick={() => handleReadAloud('en-US')}\r\n                className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none\"\r\n              >\r\n                Read Aloud (English)\r\n              </button>\r\n\r\n              {/* Read Aloud Button in Hindi */}\r\n              <button\r\n                onClick={() => handleReadAloud('hi-IN')}\r\n                className=\"mt-4 ml-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none\"\r\n              >\r\n                Read Aloud (Hindi)\r\n              </button>\r\n\r\n              {/* Pause Button */}\r\n              <button\r\n                onClick={handlePause}\r\n                className=\"mt-4 ml-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 focus:outline-none\"\r\n                disabled={!isSpeaking}\r\n              >\r\n                Pause\r\n              </button>\r\n\r\n              {/* Resume Button */}\r\n              <button\r\n                onClick={handleResume}\r\n                className=\"mt-4 ml-2 px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 focus:outline-none\"\r\n                disabled={!window.speechSynthesis.paused}\r\n              >\r\n                Resume\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default BotAvatar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}